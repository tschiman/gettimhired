type Query {
    getCandidates: [Candidate]
    getCandidateById(id: ID!): Candidate

    getJobs(candidateId: String!): [Job]
    getJobById(id: ID!): Job

    getEducations(candidateId: String!): [Education]
    getEducationById(id: ID!): Education
}

type Mutation {
    createCandidate(candidate: CandidateInput): Candidate

    createJob(job: JobInput): Job

    createEducation(education: EducationInput): Education
}

type Education {
    id: ID!
    userId: String!
    candidateId: String!
    name: String!
    startDate: String
    endDate: String
    graduated: Boolean
    areaOfStudy: String
    levelOfEducation: String
}
input EducationInput {
    id: ID
    userId: String
    candidateId: String!
    name: String!
    startDate: String
    endDate: String
    graduated: Boolean
    areaOfStudy: String!
    levelOfEducation: String
}

type Candidate {
    id: ID!
    userId: String!
    firstName: String!
    lastName: String!
    summary: String
}
input CandidateInput {
    id: String
    userId: String
    firstName: String!
    lastName: String!
    summary: String
}

type Job {
    id: ID!
    userId: String!
    candidateId: String!
    companyName: String
    title: String
    startDate: String
    endDate: String
    skills: [String]
    achievements: [String]
    currentlyWorking: Boolean
}
input JobInput {
    id: ID
    userId: String
    candidateId: String!
    companyName: String
    title: String
    startDate: String
    endDate: String
    skills: [String]
    achievements: [String]
    currentlyWorking: Boolean
}